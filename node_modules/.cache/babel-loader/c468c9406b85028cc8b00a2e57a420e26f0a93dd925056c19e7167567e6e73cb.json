{"ast":null,"code":"import API_CONFIG from '../config/api';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_CONFIG.BASE_URL;\n    this.token = localStorage.getItem('authToken');\n  }\n  setToken(token) {\n    this.token = token;\n    if (token) {\n      localStorage.setItem('authToken', token);\n    } else {\n      localStorage.removeItem('authToken');\n    }\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(this.token && {\n          Authorization: `Bearer ${this.token}`\n        }),\n        ...options.headers\n      },\n      ...options\n    };\n    if (config.body && typeof config.body === 'object') {\n      config.body = JSON.stringify(config.body);\n    }\n    console.log('API Request:', {\n      url,\n      method: config.method || 'GET',\n      headers: config.headers,\n      body: config.body\n    });\n    try {\n      const response = await fetch(url, config);\n      console.log('API Response status:', response.status);\n      console.log('API Response headers:', Object.fromEntries(response.headers.entries()));\n\n      // Check if response is JSON\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        // If not JSON, get the text content to see what we're actually receiving\n        const textContent = await response.text();\n        console.error('Received non-JSON response:', textContent.substring(0, 1000));\n        console.error('Full response URL:', url);\n        console.error('Response status:', response.status);\n        throw new Error(`Expected JSON response but received ${contentType || 'unknown content type'}. Status: ${response.status}. Check the console for full response details.`);\n      }\n      const data = await response.json();\n      console.log('API Response data:', data);\n      if (!response.ok) {\n        throw new Error(data.error || data.message || `HTTP error! status: ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error('API request failed:', error);\n      console.error('Request details:', {\n        url,\n        config\n      });\n      throw error;\n    }\n  }\n\n  // Test backend connectivity\n  async testConnection() {\n    try {\n      console.log('Testing backend connectivity...');\n\n      // Try the root endpoint first\n      const rootResponse = await fetch(`${this.baseURL.replace('/api', '')}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Backend root check status:', rootResponse.status);\n\n      // Try without /api prefix\n      const noApiResponse = await fetch(`${this.baseURL.replace('/api', '')}/auth/login`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Backend /auth/login (no /api) status:', noApiResponse.status);\n\n      // Try the health endpoint\n      const healthResponse = await fetch(`${this.baseURL}/health`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Backend health check status:', healthResponse.status);\n\n      // Try the auth endpoint\n      const authResponse = await fetch(`${this.baseURL}/auth`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Backend auth check status:', authResponse.status);\n\n      // Try different possible auth endpoints\n      const loginResponse = await fetch(`${this.baseURL.replace('/api', '')}/login`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Backend /login status:', loginResponse.status);\n      return rootResponse.ok || healthResponse.ok || authResponse.ok || noApiResponse.ok || loginResponse.ok;\n    } catch (error) {\n      console.error('Backend health check failed:', error);\n      return false;\n    }\n  }\n\n  // Authentication methods\n  async login(credentials) {\n    // Temporary mock authentication until backend endpoints are ready\n    console.log('Using mock authentication for:', credentials.email);\n\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Mock user data based on email\n    const mockUsers = {\n      'chris@rpexotics.com': {\n        id: 1,\n        name: 'Chris Murphy',\n        email: 'chris@rpexotics.com',\n        role: 'admin',\n        permissions: {\n          canCreateDeals: true,\n          canViewFinancials: true,\n          canManageDealers: true\n        }\n      },\n      'brennan@rpexotics.com': {\n        id: 2,\n        name: 'Brennan Sauer',\n        email: 'brennan@rpexotics.com',\n        role: 'admin',\n        permissions: {\n          canCreateDeals: true,\n          canViewFinancials: true,\n          canManageDealers: true\n        }\n      },\n      'parker@rpexotics.com': {\n        id: 3,\n        name: 'Parker User',\n        email: 'parker@rpexotics.com',\n        role: 'admin',\n        permissions: {\n          canCreateDeals: true,\n          canViewFinancials: true,\n          canManageDealers: true\n        }\n      },\n      'sales@rpexotics.com': {\n        id: 4,\n        name: 'Sales User',\n        email: 'sales@rpexotics.com',\n        role: 'sales',\n        permissions: {\n          canCreateDeals: true,\n          canViewFinancials: false,\n          canManageDealers: false\n        }\n      },\n      'backoffice@rpexotics.com': {\n        id: 5,\n        name: 'Back Office User',\n        email: 'backoffice@rpexotics.com',\n        role: 'backoffice',\n        permissions: {\n          canCreateDeals: false,\n          canViewFinancials: true,\n          canManageDealers: true\n        }\n      },\n      'viewer@rpexotics.com': {\n        id: 6,\n        name: 'Viewer User',\n        email: 'viewer@rpexotics.com',\n        role: 'viewer',\n        permissions: {\n          canCreateDeals: false,\n          canViewFinancials: false,\n          canManageDealers: false\n        }\n      }\n    };\n    const user = mockUsers[credentials.email];\n    if (user) {\n      const mockToken = 'mock-jwt-token-' + Date.now();\n      this.setToken(mockToken);\n      return {\n        success: true,\n        token: mockToken,\n        user: user,\n        message: 'Login successful (mock)'\n      };\n    } else {\n      throw new Error('Invalid credentials');\n    }\n  }\n  async logout() {\n    // Mock logout\n    console.log('Mock logout successful');\n    this.setToken(null);\n    return {\n      success: true,\n      message: 'Logout successful (mock)'\n    };\n  }\n  async getCurrentUser() {\n    // Mock current user - return the user from localStorage if available\n    const token = localStorage.getItem('authToken');\n    if (token && token.startsWith('mock-jwt-token-')) {\n      // Return a mock user based on the token\n      return {\n        id: 1,\n        name: 'Chris Murphy',\n        email: 'chris@rpexotics.com',\n        role: 'admin',\n        permissions: {\n          canCreateDeals: true,\n          canViewFinancials: true,\n          canManageDealers: true\n        }\n      };\n    }\n    throw new Error('No authenticated user');\n  }\n\n  // Deal management methods\n  async decodeVIN(vin) {\n    return this.request(API_CONFIG.ENDPOINTS.DECODE_VIN, {\n      method: 'POST',\n      body: {\n        vin\n      }\n    });\n  }\n  async searchDealers(query) {\n    return this.request(`${API_CONFIG.ENDPOINTS.SEARCH_DEALERS}?q=${encodeURIComponent(query)}`);\n  }\n  async createDeal(dealData) {\n    return this.request(API_CONFIG.ENDPOINTS.DEALS, {\n      method: 'POST',\n      body: dealData\n    });\n  }\n  async getDeals(filters = {}) {\n    const queryParams = new URLSearchParams(filters).toString();\n    return this.request(`${API_CONFIG.ENDPOINTS.DEALS}${queryParams ? `?${queryParams}` : ''}`);\n  }\n  async updateDeal(dealId, dealData) {\n    return this.request(`${API_CONFIG.ENDPOINTS.DEALS}/${dealId}`, {\n      method: 'PUT',\n      body: dealData\n    });\n  }\n  async deleteDeal(dealId) {\n    return this.request(`${API_CONFIG.ENDPOINTS.DEALS}/${dealId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Dealer management methods\n  async getDealers(filters = {}) {\n    const queryParams = new URLSearchParams(filters).toString();\n    return this.request(`/dealers${queryParams ? `?${queryParams}` : ''}`);\n  }\n  async createDealer(dealerData) {\n    return this.request('/dealers', {\n      method: 'POST',\n      body: dealerData\n    });\n  }\n  async updateDealer(dealerId, dealerData) {\n    return this.request(`/dealers/${dealerId}`, {\n      method: 'PUT',\n      body: dealerData\n    });\n  }\n  async deleteDealer(dealerId) {\n    return this.request(`/dealers/${dealerId}`, {\n      method: 'DELETE'\n    });\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["API_CONFIG","ApiService","constructor","baseURL","BASE_URL","token","localStorage","getItem","setToken","setItem","removeItem","request","endpoint","options","url","config","headers","Authorization","body","JSON","stringify","console","log","method","response","fetch","status","Object","fromEntries","entries","contentType","get","includes","textContent","text","error","substring","Error","data","json","ok","message","testConnection","rootResponse","replace","noApiResponse","healthResponse","authResponse","loginResponse","login","credentials","email","Promise","resolve","setTimeout","mockUsers","id","name","role","permissions","canCreateDeals","canViewFinancials","canManageDealers","user","mockToken","Date","now","success","logout","getCurrentUser","startsWith","decodeVIN","vin","ENDPOINTS","DECODE_VIN","searchDealers","query","SEARCH_DEALERS","encodeURIComponent","createDeal","dealData","DEALS","getDeals","filters","queryParams","URLSearchParams","toString","updateDeal","dealId","deleteDeal","getDealers","createDealer","dealerData","updateDealer","dealerId","deleteDealer"],"sources":["/Users/bsauer02/Desktop/Opis3.0/rp-exotics-frontend/src/services/api.js"],"sourcesContent":["import API_CONFIG from '../config/api';\n\nclass ApiService {\n  constructor() {\n    this.baseURL = API_CONFIG.BASE_URL;\n    this.token = localStorage.getItem('authToken');\n  }\n\n  setToken(token) {\n    this.token = token;\n    if (token) {\n      localStorage.setItem('authToken', token);\n    } else {\n      localStorage.removeItem('authToken');\n    }\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(this.token && { Authorization: `Bearer ${this.token}` }),\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    if (config.body && typeof config.body === 'object') {\n      config.body = JSON.stringify(config.body);\n    }\n\n    console.log('API Request:', {\n      url,\n      method: config.method || 'GET',\n      headers: config.headers,\n      body: config.body\n    });\n\n    try {\n      const response = await fetch(url, config);\n      console.log('API Response status:', response.status);\n      console.log('API Response headers:', Object.fromEntries(response.headers.entries()));\n      \n      // Check if response is JSON\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        // If not JSON, get the text content to see what we're actually receiving\n        const textContent = await response.text();\n        console.error('Received non-JSON response:', textContent.substring(0, 1000));\n        console.error('Full response URL:', url);\n        console.error('Response status:', response.status);\n        throw new Error(`Expected JSON response but received ${contentType || 'unknown content type'}. Status: ${response.status}. Check the console for full response details.`);\n      }\n      \n      const data = await response.json();\n      console.log('API Response data:', data);\n\n      if (!response.ok) {\n        throw new Error(data.error || data.message || `HTTP error! status: ${response.status}`);\n      }\n\n      return data;\n    } catch (error) {\n      console.error('API request failed:', error);\n      console.error('Request details:', { url, config });\n      throw error;\n    }\n  }\n\n  // Test backend connectivity\n  async testConnection() {\n    try {\n      console.log('Testing backend connectivity...');\n      \n      // Try the root endpoint first\n      const rootResponse = await fetch(`${this.baseURL.replace('/api', '')}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n      console.log('Backend root check status:', rootResponse.status);\n      \n      // Try without /api prefix\n      const noApiResponse = await fetch(`${this.baseURL.replace('/api', '')}/auth/login`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n      console.log('Backend /auth/login (no /api) status:', noApiResponse.status);\n      \n      // Try the health endpoint\n      const healthResponse = await fetch(`${this.baseURL}/health`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n      console.log('Backend health check status:', healthResponse.status);\n      \n      // Try the auth endpoint\n      const authResponse = await fetch(`${this.baseURL}/auth`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n      console.log('Backend auth check status:', authResponse.status);\n      \n      // Try different possible auth endpoints\n      const loginResponse = await fetch(`${this.baseURL.replace('/api', '')}/login`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n      console.log('Backend /login status:', loginResponse.status);\n      \n      return rootResponse.ok || healthResponse.ok || authResponse.ok || noApiResponse.ok || loginResponse.ok;\n    } catch (error) {\n      console.error('Backend health check failed:', error);\n      return false;\n    }\n  }\n\n  // Authentication methods\n  async login(credentials) {\n    // Temporary mock authentication until backend endpoints are ready\n    console.log('Using mock authentication for:', credentials.email);\n    \n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Mock user data based on email\n    const mockUsers = {\n      'chris@rpexotics.com': {\n        id: 1,\n        name: 'Chris Murphy',\n        email: 'chris@rpexotics.com',\n        role: 'admin',\n        permissions: {\n          canCreateDeals: true,\n          canViewFinancials: true,\n          canManageDealers: true\n        }\n      },\n      'brennan@rpexotics.com': {\n        id: 2,\n        name: 'Brennan Sauer',\n        email: 'brennan@rpexotics.com',\n        role: 'admin',\n        permissions: {\n          canCreateDeals: true,\n          canViewFinancials: true,\n          canManageDealers: true\n        }\n      },\n      'parker@rpexotics.com': {\n        id: 3,\n        name: 'Parker User',\n        email: 'parker@rpexotics.com',\n        role: 'admin',\n        permissions: {\n          canCreateDeals: true,\n          canViewFinancials: true,\n          canManageDealers: true\n        }\n      },\n      'sales@rpexotics.com': {\n        id: 4,\n        name: 'Sales User',\n        email: 'sales@rpexotics.com',\n        role: 'sales',\n        permissions: {\n          canCreateDeals: true,\n          canViewFinancials: false,\n          canManageDealers: false\n        }\n      },\n      'backoffice@rpexotics.com': {\n        id: 5,\n        name: 'Back Office User',\n        email: 'backoffice@rpexotics.com',\n        role: 'backoffice',\n        permissions: {\n          canCreateDeals: false,\n          canViewFinancials: true,\n          canManageDealers: true\n        }\n      },\n      'viewer@rpexotics.com': {\n        id: 6,\n        name: 'Viewer User',\n        email: 'viewer@rpexotics.com',\n        role: 'viewer',\n        permissions: {\n          canCreateDeals: false,\n          canViewFinancials: false,\n          canManageDealers: false\n        }\n      }\n    };\n    \n    const user = mockUsers[credentials.email];\n    \n    if (user) {\n      const mockToken = 'mock-jwt-token-' + Date.now();\n      this.setToken(mockToken);\n      \n      return {\n        success: true,\n        token: mockToken,\n        user: user,\n        message: 'Login successful (mock)'\n      };\n    } else {\n      throw new Error('Invalid credentials');\n    }\n  }\n\n  async logout() {\n    // Mock logout\n    console.log('Mock logout successful');\n    this.setToken(null);\n    return { success: true, message: 'Logout successful (mock)' };\n  }\n\n  async getCurrentUser() {\n    // Mock current user - return the user from localStorage if available\n    const token = localStorage.getItem('authToken');\n    if (token && token.startsWith('mock-jwt-token-')) {\n      // Return a mock user based on the token\n      return {\n        id: 1,\n        name: 'Chris Murphy',\n        email: 'chris@rpexotics.com',\n        role: 'admin',\n        permissions: {\n          canCreateDeals: true,\n          canViewFinancials: true,\n          canManageDealers: true\n        }\n      };\n    }\n    throw new Error('No authenticated user');\n  }\n\n  // Deal management methods\n  async decodeVIN(vin) {\n    return this.request(API_CONFIG.ENDPOINTS.DECODE_VIN, {\n      method: 'POST',\n      body: { vin }\n    });\n  }\n\n  async searchDealers(query) {\n    return this.request(`${API_CONFIG.ENDPOINTS.SEARCH_DEALERS}?q=${encodeURIComponent(query)}`);\n  }\n\n  async createDeal(dealData) {\n    return this.request(API_CONFIG.ENDPOINTS.DEALS, {\n      method: 'POST',\n      body: dealData\n    });\n  }\n\n  async getDeals(filters = {}) {\n    const queryParams = new URLSearchParams(filters).toString();\n    return this.request(`${API_CONFIG.ENDPOINTS.DEALS}${queryParams ? `?${queryParams}` : ''}`);\n  }\n\n  async updateDeal(dealId, dealData) {\n    return this.request(`${API_CONFIG.ENDPOINTS.DEALS}/${dealId}`, {\n      method: 'PUT',\n      body: dealData\n    });\n  }\n\n  async deleteDeal(dealId) {\n    return this.request(`${API_CONFIG.ENDPOINTS.DEALS}/${dealId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Dealer management methods\n  async getDealers(filters = {}) {\n    const queryParams = new URLSearchParams(filters).toString();\n    return this.request(`/dealers${queryParams ? `?${queryParams}` : ''}`);\n  }\n\n  async createDealer(dealerData) {\n    return this.request('/dealers', {\n      method: 'POST',\n      body: dealerData\n    });\n  }\n\n  async updateDealer(dealerId, dealerData) {\n    return this.request(`/dealers/${dealerId}`, {\n      method: 'PUT',\n      body: dealerData\n    });\n  }\n\n  async deleteDealer(dealerId) {\n    return this.request(`/dealers/${dealerId}`, {\n      method: 'DELETE'\n    });\n  }\n}\n\nexport default new ApiService(); "],"mappings":"AAAA,OAAOA,UAAU,MAAM,eAAe;AAEtC,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAGH,UAAU,CAACI,QAAQ;IAClC,IAAI,CAACC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAChD;EAEAC,QAAQA,CAACH,KAAK,EAAE;IACd,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAIA,KAAK,EAAE;MACTC,YAAY,CAACG,OAAO,CAAC,WAAW,EAAEJ,KAAK,CAAC;IAC1C,CAAC,MAAM;MACLC,YAAY,CAACI,UAAU,CAAC,WAAW,CAAC;IACtC;EACF;EAEA,MAAMC,OAAOA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACpC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACX,OAAO,GAAGS,QAAQ,EAAE;IACxC,MAAMG,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,IAAI,IAAI,CAACX,KAAK,IAAI;UAAEY,aAAa,EAAE,UAAU,IAAI,CAACZ,KAAK;QAAG,CAAC,CAAC;QAC5D,GAAGQ,OAAO,CAACG;MACb,CAAC;MACD,GAAGH;IACL,CAAC;IAED,IAAIE,MAAM,CAACG,IAAI,IAAI,OAAOH,MAAM,CAACG,IAAI,KAAK,QAAQ,EAAE;MAClDH,MAAM,CAACG,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACL,MAAM,CAACG,IAAI,CAAC;IAC3C;IAEAG,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE;MAC1BR,GAAG;MACHS,MAAM,EAAER,MAAM,CAACQ,MAAM,IAAI,KAAK;MAC9BP,OAAO,EAAED,MAAM,CAACC,OAAO;MACvBE,IAAI,EAAEH,MAAM,CAACG;IACf,CAAC,CAAC;IAEF,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACX,GAAG,EAAEC,MAAM,CAAC;MACzCM,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEE,QAAQ,CAACE,MAAM,CAAC;MACpDL,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEK,MAAM,CAACC,WAAW,CAACJ,QAAQ,CAACR,OAAO,CAACa,OAAO,CAAC,CAAC,CAAC,CAAC;;MAEpF;MACA,MAAMC,WAAW,GAAGN,QAAQ,CAACR,OAAO,CAACe,GAAG,CAAC,cAAc,CAAC;MACxD,IAAI,CAACD,WAAW,IAAI,CAACA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;QAC7D;QACA,MAAMC,WAAW,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACzCb,OAAO,CAACc,KAAK,CAAC,6BAA6B,EAAEF,WAAW,CAACG,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAC5Ef,OAAO,CAACc,KAAK,CAAC,oBAAoB,EAAErB,GAAG,CAAC;QACxCO,OAAO,CAACc,KAAK,CAAC,kBAAkB,EAAEX,QAAQ,CAACE,MAAM,CAAC;QAClD,MAAM,IAAIW,KAAK,CAAC,uCAAuCP,WAAW,IAAI,sBAAsB,aAAaN,QAAQ,CAACE,MAAM,gDAAgD,CAAC;MAC3K;MAEA,MAAMY,IAAI,GAAG,MAAMd,QAAQ,CAACe,IAAI,CAAC,CAAC;MAClClB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEgB,IAAI,CAAC;MAEvC,IAAI,CAACd,QAAQ,CAACgB,EAAE,EAAE;QAChB,MAAM,IAAIH,KAAK,CAACC,IAAI,CAACH,KAAK,IAAIG,IAAI,CAACG,OAAO,IAAI,uBAAuBjB,QAAQ,CAACE,MAAM,EAAE,CAAC;MACzF;MAEA,OAAOY,IAAI;IACb,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3Cd,OAAO,CAACc,KAAK,CAAC,kBAAkB,EAAE;QAAErB,GAAG;QAAEC;MAAO,CAAC,CAAC;MAClD,MAAMoB,KAAK;IACb;EACF;;EAEA;EACA,MAAMO,cAAcA,CAAA,EAAG;IACrB,IAAI;MACFrB,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;;MAE9C;MACA,MAAMqB,YAAY,GAAG,MAAMlB,KAAK,CAAC,GAAG,IAAI,CAACtB,OAAO,CAACyC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,EAAE;QACtErB,MAAM,EAAE,KAAK;QACbP,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACFK,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEqB,YAAY,CAACjB,MAAM,CAAC;;MAE9D;MACA,MAAMmB,aAAa,GAAG,MAAMpB,KAAK,CAAC,GAAG,IAAI,CAACtB,OAAO,CAACyC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,aAAa,EAAE;QAClFrB,MAAM,EAAE,KAAK;QACbP,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACFK,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEuB,aAAa,CAACnB,MAAM,CAAC;;MAE1E;MACA,MAAMoB,cAAc,GAAG,MAAMrB,KAAK,CAAC,GAAG,IAAI,CAACtB,OAAO,SAAS,EAAE;QAC3DoB,MAAM,EAAE,KAAK;QACbP,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACFK,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEwB,cAAc,CAACpB,MAAM,CAAC;;MAElE;MACA,MAAMqB,YAAY,GAAG,MAAMtB,KAAK,CAAC,GAAG,IAAI,CAACtB,OAAO,OAAO,EAAE;QACvDoB,MAAM,EAAE,KAAK;QACbP,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACFK,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEyB,YAAY,CAACrB,MAAM,CAAC;;MAE9D;MACA,MAAMsB,aAAa,GAAG,MAAMvB,KAAK,CAAC,GAAG,IAAI,CAACtB,OAAO,CAACyC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,QAAQ,EAAE;QAC7ErB,MAAM,EAAE,KAAK;QACbP,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACFK,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE0B,aAAa,CAACtB,MAAM,CAAC;MAE3D,OAAOiB,YAAY,CAACH,EAAE,IAAIM,cAAc,CAACN,EAAE,IAAIO,YAAY,CAACP,EAAE,IAAIK,aAAa,CAACL,EAAE,IAAIQ,aAAa,CAACR,EAAE;IACxG,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO,KAAK;IACd;EACF;;EAEA;EACA,MAAMc,KAAKA,CAACC,WAAW,EAAE;IACvB;IACA7B,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE4B,WAAW,CAACC,KAAK,CAAC;;IAEhE;IACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;IAEvD;IACA,MAAME,SAAS,GAAG;MAChB,qBAAqB,EAAE;QACrBC,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,cAAc;QACpBN,KAAK,EAAE,qBAAqB;QAC5BO,IAAI,EAAE,OAAO;QACbC,WAAW,EAAE;UACXC,cAAc,EAAE,IAAI;UACpBC,iBAAiB,EAAE,IAAI;UACvBC,gBAAgB,EAAE;QACpB;MACF,CAAC;MACD,uBAAuB,EAAE;QACvBN,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,eAAe;QACrBN,KAAK,EAAE,uBAAuB;QAC9BO,IAAI,EAAE,OAAO;QACbC,WAAW,EAAE;UACXC,cAAc,EAAE,IAAI;UACpBC,iBAAiB,EAAE,IAAI;UACvBC,gBAAgB,EAAE;QACpB;MACF,CAAC;MACD,sBAAsB,EAAE;QACtBN,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,aAAa;QACnBN,KAAK,EAAE,sBAAsB;QAC7BO,IAAI,EAAE,OAAO;QACbC,WAAW,EAAE;UACXC,cAAc,EAAE,IAAI;UACpBC,iBAAiB,EAAE,IAAI;UACvBC,gBAAgB,EAAE;QACpB;MACF,CAAC;MACD,qBAAqB,EAAE;QACrBN,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,YAAY;QAClBN,KAAK,EAAE,qBAAqB;QAC5BO,IAAI,EAAE,OAAO;QACbC,WAAW,EAAE;UACXC,cAAc,EAAE,IAAI;UACpBC,iBAAiB,EAAE,KAAK;UACxBC,gBAAgB,EAAE;QACpB;MACF,CAAC;MACD,0BAA0B,EAAE;QAC1BN,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,kBAAkB;QACxBN,KAAK,EAAE,0BAA0B;QACjCO,IAAI,EAAE,YAAY;QAClBC,WAAW,EAAE;UACXC,cAAc,EAAE,KAAK;UACrBC,iBAAiB,EAAE,IAAI;UACvBC,gBAAgB,EAAE;QACpB;MACF,CAAC;MACD,sBAAsB,EAAE;QACtBN,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,aAAa;QACnBN,KAAK,EAAE,sBAAsB;QAC7BO,IAAI,EAAE,QAAQ;QACdC,WAAW,EAAE;UACXC,cAAc,EAAE,KAAK;UACrBC,iBAAiB,EAAE,KAAK;UACxBC,gBAAgB,EAAE;QACpB;MACF;IACF,CAAC;IAED,MAAMC,IAAI,GAAGR,SAAS,CAACL,WAAW,CAACC,KAAK,CAAC;IAEzC,IAAIY,IAAI,EAAE;MACR,MAAMC,SAAS,GAAG,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MAChD,IAAI,CAAC1D,QAAQ,CAACwD,SAAS,CAAC;MAExB,OAAO;QACLG,OAAO,EAAE,IAAI;QACb9D,KAAK,EAAE2D,SAAS;QAChBD,IAAI,EAAEA,IAAI;QACVtB,OAAO,EAAE;MACX,CAAC;IACH,CAAC,MAAM;MACL,MAAM,IAAIJ,KAAK,CAAC,qBAAqB,CAAC;IACxC;EACF;EAEA,MAAM+B,MAAMA,CAAA,EAAG;IACb;IACA/C,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrC,IAAI,CAACd,QAAQ,CAAC,IAAI,CAAC;IACnB,OAAO;MAAE2D,OAAO,EAAE,IAAI;MAAE1B,OAAO,EAAE;IAA2B,CAAC;EAC/D;EAEA,MAAM4B,cAAcA,CAAA,EAAG;IACrB;IACA,MAAMhE,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAIF,KAAK,IAAIA,KAAK,CAACiE,UAAU,CAAC,iBAAiB,CAAC,EAAE;MAChD;MACA,OAAO;QACLd,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,cAAc;QACpBN,KAAK,EAAE,qBAAqB;QAC5BO,IAAI,EAAE,OAAO;QACbC,WAAW,EAAE;UACXC,cAAc,EAAE,IAAI;UACpBC,iBAAiB,EAAE,IAAI;UACvBC,gBAAgB,EAAE;QACpB;MACF,CAAC;IACH;IACA,MAAM,IAAIzB,KAAK,CAAC,uBAAuB,CAAC;EAC1C;;EAEA;EACA,MAAMkC,SAASA,CAACC,GAAG,EAAE;IACnB,OAAO,IAAI,CAAC7D,OAAO,CAACX,UAAU,CAACyE,SAAS,CAACC,UAAU,EAAE;MACnDnD,MAAM,EAAE,MAAM;MACdL,IAAI,EAAE;QAAEsD;MAAI;IACd,CAAC,CAAC;EACJ;EAEA,MAAMG,aAAaA,CAACC,KAAK,EAAE;IACzB,OAAO,IAAI,CAACjE,OAAO,CAAC,GAAGX,UAAU,CAACyE,SAAS,CAACI,cAAc,MAAMC,kBAAkB,CAACF,KAAK,CAAC,EAAE,CAAC;EAC9F;EAEA,MAAMG,UAAUA,CAACC,QAAQ,EAAE;IACzB,OAAO,IAAI,CAACrE,OAAO,CAACX,UAAU,CAACyE,SAAS,CAACQ,KAAK,EAAE;MAC9C1D,MAAM,EAAE,MAAM;MACdL,IAAI,EAAE8D;IACR,CAAC,CAAC;EACJ;EAEA,MAAME,QAAQA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC3B,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACF,OAAO,CAAC,CAACG,QAAQ,CAAC,CAAC;IAC3D,OAAO,IAAI,CAAC3E,OAAO,CAAC,GAAGX,UAAU,CAACyE,SAAS,CAACQ,KAAK,GAAGG,WAAW,GAAG,IAAIA,WAAW,EAAE,GAAG,EAAE,EAAE,CAAC;EAC7F;EAEA,MAAMG,UAAUA,CAACC,MAAM,EAAER,QAAQ,EAAE;IACjC,OAAO,IAAI,CAACrE,OAAO,CAAC,GAAGX,UAAU,CAACyE,SAAS,CAACQ,KAAK,IAAIO,MAAM,EAAE,EAAE;MAC7DjE,MAAM,EAAE,KAAK;MACbL,IAAI,EAAE8D;IACR,CAAC,CAAC;EACJ;EAEA,MAAMS,UAAUA,CAACD,MAAM,EAAE;IACvB,OAAO,IAAI,CAAC7E,OAAO,CAAC,GAAGX,UAAU,CAACyE,SAAS,CAACQ,KAAK,IAAIO,MAAM,EAAE,EAAE;MAC7DjE,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMmE,UAAUA,CAACP,OAAO,GAAG,CAAC,CAAC,EAAE;IAC7B,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACF,OAAO,CAAC,CAACG,QAAQ,CAAC,CAAC;IAC3D,OAAO,IAAI,CAAC3E,OAAO,CAAC,WAAWyE,WAAW,GAAG,IAAIA,WAAW,EAAE,GAAG,EAAE,EAAE,CAAC;EACxE;EAEA,MAAMO,YAAYA,CAACC,UAAU,EAAE;IAC7B,OAAO,IAAI,CAACjF,OAAO,CAAC,UAAU,EAAE;MAC9BY,MAAM,EAAE,MAAM;MACdL,IAAI,EAAE0E;IACR,CAAC,CAAC;EACJ;EAEA,MAAMC,YAAYA,CAACC,QAAQ,EAAEF,UAAU,EAAE;IACvC,OAAO,IAAI,CAACjF,OAAO,CAAC,YAAYmF,QAAQ,EAAE,EAAE;MAC1CvE,MAAM,EAAE,KAAK;MACbL,IAAI,EAAE0E;IACR,CAAC,CAAC;EACJ;EAEA,MAAMG,YAAYA,CAACD,QAAQ,EAAE;IAC3B,OAAO,IAAI,CAACnF,OAAO,CAAC,YAAYmF,QAAQ,EAAE,EAAE;MAC1CvE,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;AACF;AAEA,eAAe,IAAItB,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}